#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('device-boilerplate-web:server');
const http = require('http');
const session = require('express-session');
const MySQLStore = require('express-mysql-session')(session);

const {BU} = require('base-util-jh');

const app = require('../app');

global.app = app;
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.WEB_PORT || '3000');
app.set('port', port);

/**
 * Set Customize
 */
const dbInfo = {
  port: process.env.DB_PORT ? process.env.DB_PORT : '3306',
  host: process.env.DB_HOST ? process.env.DB_HOST : 'localhost',
  user: process.env.DB_USER ? process.env.DB_USER : 'root',
  password: process.env.DB_PW ? process.env.DB_PW : 'test',
  database: process.env.DB_DB ? process.env.DB_DB : 'test',
};

app.set('dbInfo', dbInfo);

app.use(
  session({
    key: 'sid',
    secret: BU.GUID(),
    store: new MySQLStore(dbInfo),
    resave: false,
    saveUninitialized: true,
    cookie: {
      maxAge: 1000 * 60 * 60 * 24, // 1일
    },
  }),
);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server ${port} is Listening`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const parsePort = parseInt(val, 10);

  if (isNaN(parsePort)) {
    // named pipe
    return val;
  }

  if (parsePort >= 0) {
    // port number
    return parsePort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

process.on('uncaughtException', err => {
  BU.CLI(err);
  console.log('uncaughtException. Node NOT Exiting...');
});

process.on('unhandledRejection', err => {
  BU.CLI(err);
  console.log('unhandledRejection. Node NOT Exiting...');
});
