<!DOCTYPE html>
<html>
  <head>
    <!-- Default Js -->
    <%- include("../master/head.ejs") %>
    <!-- <script src="/js/contents/master/mainUtil.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>

    <!-- SVG Map 을 생성하기 위한 필수 Library -->
    <script src="/js/svg/svg.js"></script>
    <script src="/js/svg/svg.filter.js"></script>
    <script src="/js/jquery.panzoom.js"></script>
    <script src="/js/jquery.mousewheel.js"></script>

    <!-- SVG Map을 생성하고 관리하기 위한 Core Library -->
    <script src="/js/drawSvg/drawSvg.js"></script>
    <script src="/socket.io/socket.io.js"></script>
  </head>

  <!-- 서버사이드 데이터 정의 -->
  <script>
    // 서브 카테고리 Dom
    var subCategoryDom = <%- JSON.stringify(dom.subCategoryDom) %>;

    // Map 정보
    var map = <%- JSON.stringify(map) %>;
    // 제어 명령 정보
    var controlInfo = <%- JSON.stringify(controlInfo) %>;
    // 제어 장치 돔 목록([{type: 'gateValue', category: "<option value="pump"> 펌프</option>" list: ['<option value="P_001">펌프 001</option>,...']}, ...])
    var deviceDomList = <%- JSON.stringify(deviceDomList) %>;
    // 세션 ID
    var sessionID = <%- JSON.stringify(sessionID) %>;
    // 로그인 사용자 정보
    var user = <%- JSON.stringify(user) %>;
  </script>

  <body>
    <div id="wrap" class="wrap hidden">
      <!-- Header -->
      <%- include("../master/header.ejs") %>
      <!--메인-->
      <div class="container_body ">
        <div class="container_row mb_50rem">
          <div id="subCategoryDom" class="report_category"></div>
        </div>
        <!-- 명령 상태, 결과 -->
        <div class="container_row">
          <p>
            장치 연결 상태:
            <span id="updateIsApiClientConn"></span>
          </p>
          <h2>
            <span>명령 처리 결과:</span>
            <span id="resultExecCommand" class="color_red"></span>
          </h2>
          <p>
            시스템 구동 모드:
            <input
              type="text"
              id="operationSystem"
              name=""
              data-algorithm-id=""
              data-algorithm-name=""
              data-cmd-strategy=""
            />
            <select class="form-control w_auto" id="operationModeSel">
              <option selected value="DEFAULT">기본 모드</option>
            </select>
            <button id="changeOperationModeBtn" class="btn btn-success">
              구동 모드 변경
            </button>
          </p>
        </div>
        <%- include("./addCommand.ejs") %>
        <!-- Content -->
        <div class="container_row flex_dir_col">
          <div class="default_area pt_1rem">
            <div id="zoom" class="zoom_box">
              <!-- panzoom, mode select -->
              <button id="zoom-in" class="btn btn-default btn-sm mr_1rem">
                <span class="glyphicon glyphicon-zoom-in"></span> Zoom-in
              </button>
              <button id="zoom-out" class="btn btn-default btn-sm mr_1rem">
                <span class="glyphicon glyphicon-zoom-out"></span> Zoom-out
              </button>
              <button id="reset" class="btn btn-default btn-sm mr_1rem">
                <span class="glyphicon glyphicon-refresh"></span> Reset
              </button>
              <select class="form-control w_auto ml_1rem" id="controlMode">
                <option value="view">뷰 모드</option>
                <option selected value="control">제어 모드</option>
              </select>
            </div>
            <!-- canvas -->
            <div>
              <div id="canvas"></div>
            </div>
          </div>
        </div>
      </div>
      <!--하단1-->
      <%- include("../master/footer.ejs") %>
    </div>

    <!-- Default Setting -->
    <script>
      $('#subCategoryDom').html(subCategoryDom);
    </script>

    <!-- Socket.IO 이벤트 바인딩 -->
    <script>
      var socket = io();

      // 접속한 사용자 Session 정보를 Socket.io 인증용으로 전송
      socket.emit('certifySocket', {
        sessionID: sessionID,
        sessionUserInfo: user,
      });

      // FIXME: 오류를 보기위하여 임시
      // 명령 요청 결과 Alert
      socket.on('resultExecCommand', function(message) {
        // console.log(message)
        document.getElementById('resultExecCommand').innerText = message;
      });

      // 장치 연결 상태 반영
      var isApiClientConn = false;
      socket.on('updateIsApiClientConn', function(isConn) {
        // console.log(isConn);
        isApiClientConn = isConn;
        var connStatus = isApiClientConn === true ? 'Connected' : 'Disconnected';
        document.getElementById('updateIsApiClientConn').innerText = connStatus;
      });

      // 제어 모드 정보
      var currModeInfo = {
        operationConfig: {
          algorithmId: '',
          algorithmName: '',
          cmdStrategy: '',
        },
        operationConfigList: [],
      };
      /**
       * @param {Object} modeInfo
       * @param {Object} modeInfo.operationConfig 제어 모드(알고리즘)
       * @param {string} modeInfo.operationConfig.algorithmId 알고리즘 ID
       * @param {string} modeInfo.operationConfig.algorithmName 알고리즘 Name
       * @param {string} modeInfo.operationConfig.cmdStrategy 명령 전략
       * @param {operationConfig[]} modeInfo.operationConfigList 구동 모드 가능 목록
       */
      socket.on('updateMode', function(modeInfo) {
        // console.log(modeInfo);
        currModeInfo = modeInfo;

        // 현재 수행중인 구동 모드 View
        var operationSystemDom = document.getElementById('operationSystem');

        var operConfig = currModeInfo.operationConfig;

        // 데이터셋을 돌면서 값 세팅
        for (const key in operationSystemDom.dataset) {
          if (operationSystemDom.dataset.hasOwnProperty(key)) {
            operationSystemDom.dataset[key] = operConfig[key];
          }
        }
        // input Value 갱신
        operationSystemDom.value = operConfig.algorithmName;

        // 구동 모드 설정 목록이 없다면 종료
        if (_.isEmpty(currModeInfo.operationConfigList)) return false;

        // 변경 가능한 구동 모드 목록
        var operationModeSelDom = document.getElementById('operationModeSel');

        // 템플릿 정의
        var optionTemplate = Handlebars.compile(
          '<option {{ selected }}  value="{{ optionId }}">{{ optionValue }}</option>',
        );
        // select option 동적 생성
        var optionDomList = _.map(currModeInfo.operationConfigList, function(oConfig) {
          // 현재 수행 중인 구동 모드와 동일한 option은 selected 처리
          var strSelected = oConfig.algorithmId === operConfig.algorithmId ? 'selected' : '';
          // 템플릿 적용하여 Dom 생성
          return optionTemplate({
            selected: strSelected,
            optionId: oConfig.algorithmId,
            optionValue: oConfig.algorithmName,
          });
        });
        // Select Dom 적용
        operationModeSelDom.innerHTML = optionDomList;
      });

      // 갱신 노드 반영
      socket.on('updateNode', function(wsNodeList) {
        // console.log(wsNodeList);
        var wsNodeList = _.isArray(wsNodeList) && wsNodeList.length > 0 ? wsNodeList : [];

        _.forEach(wsNodeList, function(wsNodeInfo) {
          // draw map
          showNodeData(wsNodeInfo.ni, wsNodeInfo.d);
        });
      });

      // 서버로 명령 실행 요청
      // $('button[name="reqControlCmd"]').on('click', function(event) {
      $('#testRequestCmdBtn').on('click', function(event) {
        var reqCmdInfo = makeControlCommand(this);

        // FIXME: 명령을 정상적으로 요청하였을 경우 요청하였다는 메시지 출력
        !_.isEmpty(reqCmdInfo) &&
          socket.emit('executeCommand', reqCmdInfo) &&
          $('#cmdGoalArea').html('');
      });

      // FIXME: TEXT 종료 후 삭제
      $(document).ready(function() {
        // var thisSelectValue = CF_SINGLE;
        // var thisSelectValue = CF_SET;
        var thisSelectValue = CF_FLOW;
        // var thisSelectValue = CF_SCENARIO;

        // 명령 형식 변경
        $('#cmdFormatSel')
          .val(thisSelectValue)
          .trigger('change');

        // $('#testRequestCmdBtn').trigger('click');
        // $('#testCancelCmdBtn').trigger('click');
      });
    </script>

    <!-- 제어 관리 js 세팅 및 바인딩 -->
    <script>
      $('#changeOperationModeBtn').on('click', function() {
        var selectedAlgorithmId = $('#operationModeSel option:selected').val();

        // 현재 수행 중인 구동 모드와 같을 경우 처리하지 않음
        if (currModeInfo.operationConfig.algorithmId === selectedAlgorithmId) {
          return false;
        }
        // console.log(selectedAlgorithmId);

        // 제어 모드 변경 요청
        socket.emit('changeOperationMode', selectedAlgorithmId);
      });
    </script>

    <!-- SVG Map 세팅 -->
    <script>
      drawSvgBasePlace('canvas'); // 멥 그리기
      setPanzoom(); // 줌 기능 세팅

      //모드 선택 설렉트 박스 and 한/영 토글 버튼
      $('#controlMode').change(function() {
        var selectedMode = this.value;
        console.log(selectedMode);

        // $(`#canvas`).empty(); // svg가 그려진 공간 초기화
        // drawSvgBasePlace('canvas'); // 초기화 후 다시 그리기 (체크 상태 포함)
        bindingClickNodeEvent(socket, selectedMode); // 장치, 센서 클릭 이벤트 다시 바인딩

        // ↓ 다시 그려진 map에 데이터를 다시 뿌려준다.
      });
      // 노드 클릭 이벤트가 발생할 경우 Socket.IO로 메시지를 전송할 객체 바인딩????
      $('#controlMode').trigger('change');

      // jquery panzoom 옵션 세팅
      function setPanzoom() {
        var svgMap = SVG.get('svgCanvas'); //id가 svgCanvas인 svg 요소 선택
        var $canvas = $('#canvas');
        var matrix = `matrix(1, 0, 0, 1, 0, 0)`; // panzoom 기본 zoom 설정
        var filter = 'win16|win32|win64|mac';

        //모바일, pc 접속 분별하여 zoom in/out 활셩 여부 설정
        if (0 > filter.indexOf(navigator.platform.toLowerCase())) {
          // mobile panzoom option
          $canvas.panzoom({
            disablePan: true,
            disableZoom: true,
            startTransform: matrix,
          });
          // zoom(in,out), reset 버튼 숨김
          $('#zoom-out', '#zoom-in', '#reset').hide();
        } else {
          // pc panzoom
          $canvas.panzoom({
            $reset: $('#reset'),
            cursor: 'context-menu',
            startTransform: matrix,
          });

          // mousewheel option
          $canvas.panzoom().on('mousewheel.focal', function(e) {
            const delta = e.delta || e.originalEvent.wheelDelta;
            const zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;

            e.preventDefault();

            $canvas.panzoom('zoom', zoomOut, {
              animate: false,
              focal: e,
            });
          });

          // zoom in, out 기능 적용
          $('#zoom-in').click(function(e) {
            $canvas.panzoom('zoom', {});
          });
          $('#zoom-out').click(function(e) {
            $canvas.panzoom('zoom', 'zoomOut', {});
          });
        }
      }
    </script>
    <!-- 검색 관련 js 모음 -->
    <script src="/js/contents/report/search.js"></script>
  </body>
</html>
