<!DOCTYPE html>
<html>
  <head>
    <!-- Default Js -->
    <%- include("../master/head.ejs") %>
    <!-- <script src="/js/contents/master/mainUtil.js"></script> -->
    <!-- SVG Map을 생성하고 관리하기 위한 Core Library -->
    <script src="/js/drawSvg/drawSvg.js"></script>
    <script src="/socket.io/socket.io.js"></script>
  </head>

  <!-- 서버사이드 데이터 정의 -->
  <script>
    // 서브 카테고리 Dom
    var subCategoryDom = <%- JSON.stringify(dom.subCategoryDom) %>;

    // Map 정보
    var map = <%- JSON.stringify(map) %>;
    // 제어 명령 정보
    var controlInfo = <%- JSON.stringify(controlInfo) %>;
    // 제어 장치 돔 목록([{type: 'gateValue', category: "<option value="pump"> 펌프</option>" list: ['<option value="P_001">펌프 001</option>,...']}, ...])
    var deviceDomList = <%- JSON.stringify(deviceDomList) %>;
    // 세션 ID
    var sessionID = <%- JSON.stringify(sessionID) %>;
    // 로그인 사용자 정보
    var user = <%- JSON.stringify(user) %>;
  </script>

  <body>
    <div id="wrap" class="wrap hidden">
      <!-- Header -->
      <%- include("../master/header.ejs") %>
      <!--메인-->
      <div class="container_body ">
        <div class="container_row mb_50rem">
          <div id="subCategoryDom" class="report_category"></div>
        </div>
        <!-- 명령 상태, 결과 -->
        <div class="container_row default_search_area">
          <p>
            장치 연결 상태:
            <span id="device_connected_stauts"></span>
          </p>
          <h2>
            <span>명령 처리 결과:</span>
            <span id="test_alert" class="color_red"></span>
          </h2>
        </div>
        <%- include("./addCommand.ejs") %>
        <!-- Content -->
        <div class="container_row flex_dir_col">
          <div class="default_area pt_1rem">
            <div id="zoom" class="zoom_box">
              <!-- panzoom, mode select -->
              <button id="zoom-in" class="btn btn-default btn-sm mr_1rem">
                <span class="glyphicon glyphicon-zoom-in"></span> Zoom-in
              </button>
              <button id="zoom-out" class="btn btn-default btn-sm mr_1rem">
                <span class="glyphicon glyphicon-zoom-out"></span> Zoom-out
              </button>
              <button id="reset" class="btn btn-default btn-sm mr_1rem">
                <span class="glyphicon glyphicon-refresh"></span> Reset
              </button>
              <select class="form-control w_auto ml_1rem" id="controlMode">
                <option value="view">뷰 모드</option>
                <option selected value="control">제어 모드</option>
              </select>
            </div>
            <!-- canvas -->
            <div>
              <div id="canvas"></div>
            </div>
          </div>
        </div>
      </div>
      <!--하단1-->
      <%- include("../master/footer.ejs") %>
    </div>

    <!-- Default Setting -->
    <script>
      $('#subCategoryDom').html(subCategoryDom);
    </script>

    <!-- Socket.IO 이벤트 바인딩 -->
    <script>
      var socket = io();

      // 접속한 사용자 Session 정보를 Socket.io 인증용으로 전송
      socket.emit('certifySocket', {
        sessionID: sessionID,
        sessionUserInfo: user,
      });

      // FIXME: 오류를 보기위하여 임시
      // 명령 요청 결과 Alert
      socket.on('resultExecCommand', function(message) {
        // console.log(commandList)
        document.getElementById('test_alert').innerText = message;
      });

      // 장치 연결 상태 반영
      socket.on('updateApiClientConn', function(strConnStatus) {
        // console.log(strConnStatus);
        document.getElementById('device_connected_stauts').innerText = strConnStatus;
      });

      // 갱신 노드 반영
      socket.on('updateNode', function(wsNodeList) {
        // console.log(wsNodeList);
        var wsNodeList = _.isArray(wsNodeList) && wsNodeList.length > 0 ? wsNodeList : [];

        _.forEach(wsNodeList, function(wsNodeInfo) {
          // draw map
          showNodeData(wsNodeInfo.ni, wsNodeInfo.d);
        });
      });

      // 서버로 명령 실행 요청
      // $('button[name="reqControlCmd"]').on('click', function(event) {
      $('#testRequestCmdBtn').on('click', function(event) {
        var reqCmdInfo = makeControlCommand(this);
        socket.emit('executeCommand', reqCmdInfo);
      });

      // FIXME: TEXT 종료 후 삭제
      $(document).ready(function() {
        // var thisSelectValue = CF_SINGLE;
        // var thisSelectValue = CF_SET;
        var thisSelectValue = CF_FLOW;
        // var thisSelectValue = CF_SCENARIO;

        // 명령 형식 변경
        $('#cmdFormatSel')
          .val(thisSelectValue)
          .trigger('change');

        // $('#testRequestCmdBtn').trigger('click');
        // $('#testCancelCmdBtn').trigger('click');
      });
    </script>

    <!-- SVG Map 세팅 -->
    <script>
      drawSvgBasePlace('canvas'); // 멥 그리기
      setPanzoom(); // 줌 기능 세팅

      //모드 선택 설렉트 박스 and 한/영 토글 버튼
      $('#controlMode').change(function() {
        var selectedMode = this.value;
        console.log(selectedMode);

        // $(`#canvas`).empty(); // svg가 그려진 공간 초기화
        // drawSvgBasePlace('canvas'); // 초기화 후 다시 그리기 (체크 상태 포함)
        bindingClickNodeEvent(socket, selectedMode); // 장치, 센서 클릭 이벤트 다시 바인딩

        // ↓ 다시 그려진 map에 데이터를 다시 뿌려준다.
      });
      // 노드 클릭 이벤트가 발생할 경우 Socket.IO로 메시지를 전송할 객체 바인딩????
      $('#controlMode').trigger('change');

      // jquery panzoom 옵션 세팅
      function setPanzoom() {
        var svgMap = SVG.get('svgCanvas'); //id가 svgCanvas인 svg 요소 선택
        var $canvas = $('#canvas');
        var matrix = `matrix(1, 0, 0, 1, 0, 0)`; // panzoom 기본 zoom 설정
        var filter = 'win16|win32|win64|mac';

        //모바일, pc 접속 분별하여 zoom in/out 활셩 여부 설정
        if (0 > filter.indexOf(navigator.platform.toLowerCase())) {
          // mobile panzoom option
          $canvas.panzoom({
            disablePan: true,
            disableZoom: true,
            startTransform: matrix,
          });
          // zoom(in,out), reset 버튼 숨김
          $('#zoom-out', '#zoom-in', '#reset').hide();
        } else {
          // pc panzoom
          $canvas.panzoom({
            $reset: $('#reset'),
            cursor: 'context-menu',
            startTransform: matrix,
          });

          // mousewheel option
          $canvas.panzoom().on('mousewheel.focal', function(e) {
            const delta = e.delta || e.originalEvent.wheelDelta;
            const zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;

            e.preventDefault();

            $canvas.panzoom('zoom', zoomOut, {
              animate: false,
              focal: e,
            });
          });

          // zoom in, out 기능 적용
          $('#zoom-in').click(function(e) {
            $canvas.panzoom('zoom', {});
          });
          $('#zoom-out').click(function(e) {
            $canvas.panzoom('zoom', 'zoomOut', {});
          });
        }
      }
    </script>
    <!-- 검색 관련 js 모음 -->
    <script src="/js/contents/report/search.js"></script>
  </body>
</html>
